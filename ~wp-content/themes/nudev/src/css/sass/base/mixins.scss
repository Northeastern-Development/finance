/**
 * modules/mixins
 * ---
 */




// Used on <ul> elements creating a flexbox-based grid of <li> elements
// Defaults are 3-columns with 30px margins,
// Accepts 2 arguments : # of columns and margin (specify units)
// This mixin needs a little more development though. There are bugs with 'dangling' last rows.
// Generally speaking it works great though, especially for 1, 2 and 3 columns
@mixin ul_grid_cols($num : 3, $margin : 30px) {
    list-style-type: none;
    display: flex;
    flex-flow: row wrap;
    li {
        flex: 1 1 calc(calc(100% / #{$num}) - #{$margin});
        margin: 0 #{$margin} #{$margin} 0;

        // these nth of type chains attempt to get a evenly spaced grid with varying numbers of items
        // if the grid has dangling last row it should fill out
        &:nth-of-type(#{$num}n) {
            margin-right: 0;
        }
        &:last-of-type:nth-of-type(even){
            margin-right: 0;
        }

        // optionally, we can use a max width to leave the items dangling and retain a squared grid
        max-width: calc( 100% / #{$num} - #{$margin});
    }
}

// neu__iconlink
@mixin neu__iconlink( $side : 'left', $icon : "\e5c8", $hover : 1) {
    border-bottom: 2px solid transparent;
    line-height: inherit;
    display: inline-block;
    @if( $side == 'left' ){
        &:before {
            display: inline-block;
            padding-right: 15px;
            font-size: 20px;
            font-family: "Material Icons";
            vertical-align: middle;
            content: $icon;
            line-height: inherit;
        }
        @if( $hover == 1 ){
            &:hover {
                color: $brand_colors-red;
            }
        }
    }
    @if( $side == 'right' ){
        &:after {
            display: inline-block;
            padding-left: 15px;
            font-size: 20px;
            font-family: "Material Icons";
            vertical-align: middle;
            content: $icon;
            line-height: inherit;
        }
        @if( $hover == 1){
            &:hover {
                color: $brand_colors-red;
            }
        }
    }
    @if( $hover == 1){
        &:hover {
            border-bottom: 2px solid $brand_colors-red;
        }
    }
}

// no scaling hover applied because the trigger may be on a parent element
@mixin neu__bgimg( $height: 245px ) {
    // wrapper
    flex: 1;
    height: $height;
    overflow: hidden;
    // margin: 0 auto;
    margin-bottom: 15px;
    text-align: center;
    background-color: black;
    // bg
    > div {
        width: 101%;
        height: 101%;
        background-position: center;
        background-size: cover;
        background-repeat: no-repeat;
        transform: scale(1);
        transition: transform 0.4s ease;
    }
}